import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:

    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }

:};

/* Preliminaries to set up and use the scanner.  */
/*init with {: scanner.init();              :};
scan with {: return scanner.next_token(); :};*/

/* Terminals (tokens returned by the scanner). */
terminal    LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, COMMA, SEMI;
terminal    ADD, SUB, STAR, DIV, NOT, AND, OR, EQ, NE, LE, LT, GE, GT, ASSIGN;
terminal    AUTO, DOUBLE, INT, STRUCT, CONST, SHORT, UNSIGN, BREAK, ELSE, LONG, SWITCH, CONTINUE, FOR, SIGNED, VOID, CASE,
            ENUM, REGISTER, TYPEDEF, DEFAULT, GOTO, SIZEOF, VOLATILE, CHAR, EXTERN, RETURN, UNION, DO, IF, STATIC, WHILE;
terminal    IDENTIFIER, INT_LITERAL, STRINGLITERAL, CHARLITERAL;

/* Non terminals */
/*non terminal            expr_list, expr_part;
non terminal Integer    expr, term, factor;*/

/* Precedences */
/*precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left UMINUS;

/* The grammar */
/*expr_list ::= expr_list expr_part |
              expr_part;
expr_part ::= expr SEMI;
expr      ::= expr PLUS expr
            | expr MINUS expr
            | expr TIMES expr
            | expr DIVIDE expr
            | expr MOD expr
	    | MINUS expr %prec UMINUS
            | LPAREN expr RPAREN
	    | NUMBER
	    ;*/
