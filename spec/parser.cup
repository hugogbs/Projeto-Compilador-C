import java_cup.runtime.*;
import compiler.core.*;
import compiler.analysis.*;
import compiler.generator.*;
import compiler.util.*;
import java.util.ArrayList;

parser code  {:
 public void report_error(String message, Object info){
   StringBuffer m = new StringBuffer("Error ");

   if (info instanceof compiler.core.JavaSymbol) {
      compiler.core.JavaSymbol s = ((compiler.core.JavaSymbol) info);

      if (s.getLine() >= 0) {
          m.append(" in line "+(s.getLine()));
          if (s.getColumn() >= 0)
              m.append(", column "+(s.getColumn()));
      }
   }

   m.append(" : "+message);

   System.out.println(m);
 }

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }
:};

terminal	IDENTIFIER, I_CONSTANT, F_CONSTANT, STRING_LITERAL, FUNC_NAME, SIZEOF;
terminal	PTR_OP, INC_OP, DEC_OP, LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP;
terminal	AND_OP, OR_OP, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, ADD_ASSIGN;
terminal	SUB_ASSIGN, LEFT_ASSIGN, RIGHT_ASSIGN, AND_ASSIGN;
terminal	XOR_ASSIGN, OR_ASSIGN;
terminal	TYPEDEF_NAME, ENUMERATION_CONSTANT;

terminal	TYPEDEF, EXTERN, STATIC, AUTO, REGISTER, INLINE;
terminal	CONST, RESTRICT, VOLATILE;
terminal	BOOL, CHAR, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID;
terminal	COMPLEX, IMAGINARY;
terminal	STRUCT, UNION, ENUM, ELLIPSIS;

terminal LT, GT, AND, PIPE, DOT, DDOT, TIL, CARET, EQUALS, INTER, LPAREN, RPAREN, COMMA, PLUS, MINUS, LBRA, RBRA, LKEY, RKEY, SEMICOLON, STAR, BAR, PERC, EXCLA;

terminal	CASE, DEFAULT, IF, ELSE, SWITCH, WHILE, DO, FOR, GOTO, CONTINUE, BREAK, RETURN;

terminal	ALIGNAS, ALIGNOF, ATOMIC, GENERIC, NORETURN, STATIC_ASSERT, THREAD_LOCAL;

non terminal primary_expression, constant,enumeration_constant, string, generic_selection, generic_assoc_list, generic_association;
non terminal postfix_expression, argument_expression_list, unary_expression, unary_operator, cast_expression, multiplicative_expression, additive_expression, shift_expression;
non terminal relational_expression, equality_expression, and_expression, exclusive_or_expression, inclusive_or_expression, logical_and_expression, logical_or_expression, conditional_expression;
non terminal assignment_expression, assignment_operator, expression, constant_expression, declaration, declaration_specifiers, init_declarator_list, init_declarator, storage_class_specifier, type_specifier;
non terminal struct_or_union_specifier, struct_or_union, struct_declaration_list, struct_declaration, specifier_qualifier_list, struct_declarator_list, struct_declarator;
non terminal enum_specifier, enumerator_list, enumerator, atomic_type_specifier, type_qualifier, function_specifier, alignment_specifier, declarator, direct_declarator;
non terminal pointer, type_qualifier_list, parameter_type_list, parameter_list, parameter_declaration, identifier_list, type_name, abstract_declarator, direct_abstract_declarator;
non terminal initializer, initializer_list, designation, designator_list, designator, static_assert_declaration, statement, labeled_statement, compound_statement, block_item_list, block_item;
non terminal expression_statement, selection_statement, iteration_statement, jump_statement, translation_unit, external_declaration, function_definition, declaration_list;

precedence nonassoc ELSE;

start with translation_unit;

primary_expression ::= IDENTIFIER:id {: Variable var = SemanticImpl.getInstance().getVariableById(id.toString());
                                        if (var == null) {
                                            Expression e = new Expression(null, null);
                                            var = new Variable(id.toString(), null, e);
                                            SemanticImpl.getInstance().addVariable(var);
                                        }
                                        RESULT = var;
                                      :}
  | constant: c {: Expression exp = new Expression(Expression.getTypeNumber(c.toString()), (String) Expression.convertNumber(c.toString()));
                   RESULT = exp;
                :}
  | string
  | LPAREN expression:ep RPAREN {: Expression exp = (Expression) ep; RESULT = exp; :}
  | generic_selection
  ;

constant ::= I_CONSTANT:i {: RESULT = new Expression(new Type("int"), i.toString()); :}
  | F_CONSTANT:f {: RESULT = new Expression(new Type("float"), f.toString()); :}
  | ENUMERATION_CONSTANT
  ;

enumeration_constant ::= IDENTIFIER;

string ::= STRING_LITERAL:s {: RESULT = new Expression(new Type("char"), (String) s); :}
	         | FUNC_NAME
	          ;

generic_selection
	::= GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
  ;

generic_assoc_list
	::= generic_association
	| generic_assoc_list COMMA generic_association
	;

generic_association
	::= type_name DDOT assignment_expression
	| DEFAULT DDOT assignment_expression
	;
// a++ a--
postfix_expression
	::= primary_expression
	| postfix_expression LBRA expression RBRA
	| postfix_expression LPAREN RPAREN
	| postfix_expression LPAREN argument_expression_list RPAREN
	| postfix_expression DOT IDENTIFIER
	| postfix_expression PTR_OP IDENTIFIER
	| postfix_expression INC_OP
	| postfix_expression DEC_OP
	| LPAREN type_name RPAREN LKEY initializer_list RKEY
	| LPAREN type_name RPAREN LKEY initializer_list COMMA RKEY
	;

argument_expression_list
	::= assignment_expression:aep {: ArrayList<Expression> el = new ArrayList<Expression>(); el.add((Expression) aep); RESULT = el;:}
	| argument_expression_list:epl COMMA assignment_expression:aep {: ((ArrayList) epl).add((Expression) aep); RESULT = epl;:}
	;

// ++a e --a

unary_expression
	::= postfix_expression
	| INC_OP unary_expression
	| DEC_OP unary_expression
	| unary_operator cast_expression
	| SIZEOF unary_expression
	| SIZEOF LPAREN type_name RPAREN
	| ALIGNOF LPAREN type_name RPAREN
	;

unary_operator
	::= AND
	| STAR
	| PLUS
	| MINUS
	| TIL
	| EXCLA
	;

cast_expression
	::= unary_expression:uep {: if (uep instanceof String) {
	                              Variable v = SemanticImpl.getInstance().getVariableById((String) uep);
                                  if (v.getValue() != null) { RESULT = v.getValue(); }
                                  else { RESULT = new Expression((Type) v.getType(), (String) uep); }
                         	  }else { RESULT = uep;} :}

	| LPAREN type_name:tn RPAREN cast_expression:cep
	;

multiplicative_expression
	::= cast_expression:cep  {: RESULT = (Expression) cep; :}
	| multiplicative_expression:mep STAR:st cast_expression:cep {:
	SemanticImpl.getInstance().checkTypeCompatibility(((Expression) mep).getType(), ((Expression) cep).getType());
	                                                             SemanticImpl.getInstance().generateBaseOpCode(st.toString(), (Expression) mep, (Expression) cep);
	                                                             :}
	| multiplicative_expression:mep BAR:br cast_expression:cep {: Logger.print("Line 143");
     	                                                        SemanticImpl.getInstance().generateBaseOpCode((String) br, (Expression) mep, (Expression) cep);:}
	| multiplicative_expression:mep PERC:pr cast_expression:cep {: Logger.print("Line 144");
     	                                                        SemanticImpl.getInstance().generateBaseOpCode((String) pr, (Expression) mep, (Expression) cep);:}
	;

additive_expression
	::= multiplicative_expression
	| additive_expression:aep PLUS multiplicative_expression:mep
	| additive_expression:aep MINUS:mn multiplicative_expression:mep {:
                                                                      SemanticImpl.getInstance().generateBaseOpCode((String) mn, (Expression) aep, (Expression) aep);:}
	;

shift_expression
	::= additive_expression
	| shift_expression LEFT_OP additive_expression
	| shift_expression RIGHT_OP additive_expression
	;

relational_expression
	::= shift_expression:se {: RESULT = se; Logger.print("Line 160"); :}
	| relational_expression:rep LT:lt shift_expression:sep {:  SemanticImpl.getInstance().generateBaseOpCode(lt.toString(), (Expression) rep, (Expression) sep);
	                                                             Logger.print("Line 161"); :}
	| relational_expression:rep GT:gt shift_expression:sep {: SemanticImpl.getInstance().generateBaseOpCode(gt.toString(), (Expression) rep, (Expression) sep);
	                                                            Logger.print("Line 162"); :}
	| relational_expression:rep LE_OP:le_op shift_expression:sep {: SemanticImpl.getInstance().generateBaseOpCode(le_op.toString(), (Expression) rep, (Expression) sep);
	                                                        Logger.print("Line 163"); :}
	| relational_expression:rep GE_OP:ge_op shift_expression:sep {: SemanticImpl.getInstance().generateBaseOpCode(ge_op.toString(), (Expression) rep, (Expression) sep);
	                                                               Logger.print("Line 164"); :}
	;

equality_expression
	::= relational_expression  {: Logger.print("Line 164"); :}
	| equality_expression:eep EQ_OP:eq_op relational_expression:rep {: SemanticImpl.getInstance().generateBaseOpCode(eq_op.toString(), (Expression) eep, (Expression) rep);
	                                                                  Logger.print("Line 169"); :}
	| equality_expression:eep NE_OP:ne_op relational_expression:rep {: SemanticImpl.getInstance().generateBaseOpCode(ne_op.toString(), (Expression) eep, (Expression) rep);
	                                                                  Logger.print("Line 170"); :}
	;

and_expression
	::= equality_expression
	| and_expression AND equality_expression
	;

exclusive_or_expression
	::= and_expression
	| exclusive_or_expression CARET and_expression
	;

inclusive_or_expression
	::= exclusive_or_expression
	| inclusive_or_expression PIPE exclusive_or_expression
	;

logical_and_expression
	::= inclusive_or_expression
	| logical_and_expression AND_OP inclusive_or_expression
	;

logical_or_expression
	::= logical_and_expression
	| logical_or_expression OR_OP logical_and_expression
	;

conditional_expression
	::= logical_or_expression
	| logical_or_expression INTER expression DDOT conditional_expression
	;

assignment_expression
	::= conditional_expression
	| unary_expression:uep assignment_operator:op assignment_expression:aep {: Logger.print(((Expression) uep).toString()); Logger.print(((Expression) aep).toString());
	                                                                         SemanticImpl.getInstance().checkTypeCompatibility(
	                                                                             ((Expression) uep).getType(),
	                                                                             ((Expression) aep).getType()); :}
	;

assignment_operator
	::= EQUALS
	| MUL_ASSIGN
	| DIV_ASSIGN
	| MOD_ASSIGN
	| ADD_ASSIGN
	| SUB_ASSIGN
	| LEFT_ASSIGN
	| RIGHT_ASSIGN
	| AND_ASSIGN
	| XOR_ASSIGN
	| OR_ASSIGN
	;

expression
	::= assignment_expression:aep {: Logger.print("Line 223"); :} //RESULT =  ListCreator.newList(aep);
	| expression:ep COMMA assignment_expression:aep {: Logger.print("Line 224"); :} //((ArrayList<Expression>) aep).add((Expression)ep); RESULT = ep;
	;

constant_expression
	::= conditional_expression {: Logger.print("Line 228"); :}	/* with constraints */
	;

declaration
	::= declaration_specifiers SEMICOLON {: Logger.print("Line 232"); :}
	| declaration_specifiers:ds init_declarator_list:idl /*{:
	  if (ds.toString().indexOf(">typedef<")>0) {
	      for (XMLElement e:
          ((XMLElement)idl).selectById("identifier"))
		        Parser.addType(((Terminal)e).value().toString());
	  }
	  :}*/ SEMICOLON {: Logger.print("Line 239"); :}
	| static_assert_declaration {: Logger.print("Line 240"); :}
	;

declaration_specifiers
	::= storage_class_specifier declaration_specifiers
	| storage_class_specifier
	| type_specifier declaration_specifiers
	| type_specifier
	| type_qualifier declaration_specifiers
	| type_qualifier
	| function_specifier declaration_specifiers
	| function_specifier
	| alignment_specifier declaration_specifiers
	| alignment_specifier
	;

init_declarator_list
	::= init_declarator
	| init_declarator_list COMMA init_declarator
	;

init_declarator
	::= declarator EQUALS initializer
	| declarator
	;

storage_class_specifier
	::= TYPEDEF
	| EXTERN
	| STATIC
	| THREAD_LOCAL
	| AUTO
	| REGISTER
	;

type_specifier
	::= VOID {:RESULT = new Type("void"); Logger.print("VOID at line 276");:}
	| CHAR {:RESULT = new Type("char"); Logger.print("CHAR at line 277");:}
	| SHORT {:RESULT = new Type("short"); Logger.print("SHORT at line 278");:}
	| INT {:RESULT = new Type("int"); Logger.print("INT at line 279");:}
	| LONG {:RESULT = new Type("long"); Logger.print("LONG at line 280");:}
	| FLOAT {:RESULT = new Type("float"); Logger.print("FLOAT at line 281");:}
	| DOUBLE {:RESULT = new Type("double"); Logger.print("DOUBLE at line 282");:}
	| SIGNED {:RESULT = new Type("signed"); Logger.print("SIGNED at line 283");:}
	| UNSIGNED {:RESULT = new Type("unsigned"); Logger.print("UNSIGNED at line 284");:}
	| BOOL {:RESULT = new Type("bool"); Logger.print("BOOL at line 285");:}
	| COMPLEX {:RESULT = new Type("complex"); Logger.print("COMPLEX at line 286");:}
	| IMAGINARY {:RESULT = new Type("imaginary"); Logger.print("IMAGINARY at line 287");:}	  	/* non-mandated extension */
	| atomic_type_specifier:ats {:Type t = new Type((String) ats); RESULT = t; Logger.print("line 288");:}
	| struct_or_union_specifier:sous {:Type t = new Type((String) sous); RESULT = t;; Logger.print("line 289");:}
	| enum_specifier:es {:Type t = new Type((String) es); RESULT = t; Logger.print("line 290");:}
	| TYPEDEF_NAME
	;

struct_or_union_specifier
	::= struct_or_union LKEY struct_declaration_list RKEY
	| struct_or_union IDENTIFIER LKEY struct_declaration_list RKEY
	| struct_or_union IDENTIFIER
	;

struct_or_union
	::= STRUCT
	| UNION
	;

struct_declaration_list
	::= struct_declaration
	| struct_declaration_list struct_declaration
	;

struct_declaration
	::= specifier_qualifier_list SEMICOLON	/* for anonymous struct/union */
	| specifier_qualifier_list struct_declarator_list SEMICOLON
	| static_assert_declaration
	;

specifier_qualifier_list
	::= type_specifier specifier_qualifier_list
	| type_specifier
	| type_qualifier specifier_qualifier_list
	| type_qualifier
	;

struct_declarator_list
	::= struct_declarator
	| struct_declarator_list COMMA struct_declarator
	;

struct_declarator
	::= DDOT constant_expression
	| declarator DDOT constant_expression
	| declarator
	;

enum_specifier
	::= ENUM LKEY enumerator_list RKEY
	| ENUM LKEY enumerator_list COMMA RKEY
	| ENUM IDENTIFIER LKEY enumerator_list RKEY
	| ENUM IDENTIFIER LKEY enumerator_list COMMA RKEY
	| ENUM IDENTIFIER
	;

enumerator_list
	::= enumerator
	| enumerator_list COMMA enumerator
	;

enumerator	/* identifiers must be flagged as ENUMERATION_CONSTANT */
	::= enumeration_constant EQUALS constant_expression
	| enumeration_constant
	;



/*atomic_type_specifier
	::= ATOMIC LPAREN type_name RPAREN
	;*/

type_qualifier
	::= CONST
	| RESTRICT
	| VOLATILE
	| ATOMIC
	;

function_specifier
	::= INLINE
	| NORETURN
	;

alignment_specifier
	::= ALIGNAS LPAREN type_name RPAREN
	| ALIGNAS LPAREN constant_expression RPAREN
	;

declarator
	::= pointer direct_declarator
	| direct_declarator
	;

direct_declarator
	::= IDENTIFIER:id {: Variable var = SemanticImpl.getInstance().getVariableById(id.toString());
                   	     if (var != null) {
                   	        SemanticImpl.getInstance().addVariableToTempList(var);
                   	     }
                   	      Expression exp = new Expression(null, null);
                          Variable v2 = new Variable(id.toString(), null, exp);
                          SemanticImpl.getInstance().addVariable(v2);
                          RESULT = v2;
                           :}
	| LPAREN declarator:d RPAREN {: RESULT = d;:}
	| direct_declarator:dd LBRA RBRA {: RESULT = dd; :}
	| direct_declarator:dd LBRA STAR RBRA {: RESULT = dd; :}
	| direct_declarator:dd LBRA STATIC type_qualifier_list assignment_expression RBRA {:RESULT = dd;:}
	| direct_declarator:dd LBRA STATIC assignment_expression RBRA {:RESULT = dd;:}
	| direct_declarator:dd LBRA type_qualifier_list STAR RBRA {:RESULT = dd;:}
	| direct_declarator:dd LBRA type_qualifier_list STATIC assignment_expression RBRA {:RESULT = dd;:}
	| direct_declarator:dd LBRA type_qualifier_list assignment_expression RBRA {:RESULT = dd;:}
	| direct_declarator:dd LBRA type_qualifier_list RBRA
	| direct_declarator:dd LBRA assignment_expression RBRA
	| direct_declarator:dd LPAREN parameter_type_list:ptl RPAREN {: String id = ((Variable) dd).getIdentifier();
                                                             	ArrayList<Parameter> params = (ArrayList<Parameter>) ptl;
                                                             	Function f = new Function(id, params);
                                                             	SemanticImpl.getInstance().addFunctionAndNewScope(f);
                                                             	RESULT = dd;
                                                            :}
	| direct_declarator:dd LPAREN RPAREN {: RESULT = dd; :}
	| direct_declarator:dd LPAREN identifier_list RPAREN
	;

pointer
	::= STAR type_qualifier_list pointer
	| STAR type_qualifier_list
	| STAR pointer
	| STAR
	;

type_qualifier_list
	::= type_qualifier
	| type_qualifier_list type_qualifier
	;


parameter_type_list
	::= parameter_list COMMA ELLIPSIS
	| parameter_list
	;

parameter_list
	::= parameter_declaration
	| parameter_list COMMA parameter_declaration
	;

parameter_declaration
	::= declaration_specifiers declarator
	| declaration_specifiers abstract_declarator
	| declaration_specifiers
	;

identifier_list
	::= IDENTIFIER
	| identifier_list COMMA IDENTIFIER
	;

type_name
	::= specifier_qualifier_list abstract_declarator
	| specifier_qualifier_list
	;

abstract_declarator
	::= pointer direct_abstract_declarator
	| pointer
	| direct_abstract_declarator
	;

direct_abstract_declarator
	::= LPAREN abstract_declarator RPAREN
	| LBRA RBRA
	| LBRA STAR RBRA
	| LBRA STATIC type_qualifier_list assignment_expression RBRA
	| LBRA STATIC assignment_expression RBRA
	| LBRA type_qualifier_list STATIC assignment_expression RBRA
	| LBRA type_qualifier_list assignment_expression RBRA
	| LBRA type_qualifier_list RBRA
	| LBRA assignment_expression RBRA
	| direct_abstract_declarator LBRA RBRA
	| direct_abstract_declarator LBRA STAR RBRA
	| direct_abstract_declarator LBRA STATIC type_qualifier_list assignment_expression RBRA
	| direct_abstract_declarator LBRA STATIC assignment_expression RBRA
	| direct_abstract_declarator LBRA type_qualifier_list assignment_expression RBRA
	| direct_abstract_declarator LBRA type_qualifier_list STATIC assignment_expression RBRA
	| direct_abstract_declarator LBRA type_qualifier_list RBRA
	| direct_abstract_declarator LBRA assignment_expression RBRA
	| LPAREN RPAREN
	| LPAREN parameter_type_list RPAREN
	| direct_abstract_declarator LPAREN RPAREN
	| direct_abstract_declarator LPAREN parameter_type_list RPAREN
	;

initializer
	::= LKEY initializer_list RKEY
	| LKEY initializer_list COMMA RKEY
	| assignment_expression
	;

initializer_list
	::= designation initializer
	| initializer
	| initializer_list COMMA designation initializer
	| initializer_list COMMA initializer
	;

designation
	::= designator_list EQUALS
	;

designator_list
	::= designator
	| designator_list designator
	;

designator
	::= LBRA constant_expression RBRA
	| DOT IDENTIFIER
	;

static_assert_declaration
	::= STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON
	;

statement
	::= labeled_statement
	| /*{: Parser.newScope(); :}*/ compound_statement //{: Parser.deleteScope(); :}
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	;

labeled_statement
	::= IDENTIFIER DDOT statement
	| CASE constant_expression DDOT statement
	| DEFAULT DDOT statement
	;

compound_statement
	::= LKEY RKEY
	| LKEY  block_item_list RKEY
	;

block_item_list
	::= block_item
	| block_item_list block_item
	;

block_item
	::= declaration
	| statement
	;

expression_statement
	::= SEMICOLON
	| expression SEMICOLON
	;

selection_statement
	::= IF LPAREN expression RPAREN statement ELSE statement
	| IF LPAREN expression RPAREN statement
	| SWITCH LPAREN expression RPAREN statement
	;

iteration_statement
	::= WHILE LPAREN expression RPAREN statement
	| DO statement WHILE LPAREN expression RPAREN SEMICOLON
	| FOR LPAREN expression_statement expression_statement RPAREN statement {:Logger.print("Line 539");:}
	| FOR LPAREN expression_statement expression_statement expression RPAREN statement {:Logger.print("Line 540");:}
	| FOR LPAREN declaration expression_statement RPAREN statement {:Logger.print("Line 541");:}
	| FOR LPAREN declaration expression_statement expression RPAREN statement {:Logger.print("Line 542");:}
	;

jump_statement
	::= GOTO IDENTIFIER SEMICOLON
	| CONTINUE SEMICOLON
	| BREAK SEMICOLON
	| RETURN SEMICOLON
	| RETURN expression SEMICOLON
	;

translation_unit
	::= external_declaration
	| translation_unit external_declaration
	;

external_declaration
	::= function_definition
	| declaration
	;

function_definition ::=declaration_specifiers declarator declaration_list
    compound_statement		                 // {: Parser.deleteScope(); :}
  	| declaration_specifiers declarator 	 // {: Parser.newScope(); :}
  	  compound_statement 	                 // {: Parser.deleteScope(); :}
  	| declarator declaration_list 	       // {: Parser.newScope(); :}
  	  compound_statement	                 // {: Parser.deleteScope(); :}
  	| declarator                           // {: Parser.newScope(); :}
  	  compound_statement 	                 // {: Parser.deleteScope(); :}
  	;

declaration_list
	::= declaration
	| declaration_list declaration
	;
